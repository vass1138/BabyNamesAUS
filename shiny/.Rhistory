#
# read all csv files using custom function
df <-
list.files(
path = "data/sa-baby-names-1944-2013",
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
df <- remove_attr_spec(df)
old_col_names <- colnames(df)
new_col_names <-  c("Name", "Count", "Position", "Filename", "Gender", "Year")
df <- set_col_names(df,old_col_names,new_col_names)
df <- select(df,"Name","Gender","Year","Count")
df <- change_col_types(df)
df <- df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
summarise(Count=sum(Count))
df$State <- "SA"
df_sa <- df
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
# remove the superfluous attribute generated by read_csv()
remove_attr_spec <- function(df) {
attr(df,"spec") <- NULL
invisible(df)
}
#
set_col_names <- function(df,old_col_names,new_col_names) {
names(new_col_names) <- old_col_names
rename_with(.data = df, .cols = old_col_names, .fn = function(x){new_col_names[x]})
}
#
change_col_types <- function(df) {
df$Gender <- as.factor(str_to_upper(df$Gender))
df$Year <- as.integer(df$Year)
df$Count <- as.integer(df$Count)
invisible(df)
}
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=ifelse(str_detect(filename,"female"),"FEMALE","MALE")) %>%
mutate(Year=str_match(filename,"_cy(\\d{4})_")[1,2]) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
# read all csv files using custom function
df <-
list.files(
path = "data/sa-baby-names-1944-2013",
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
getwd()
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
# remove the superfluous attribute generated by read_csv()
remove_attr_spec <- function(df) {
attr(df,"spec") <- NULL
invisible(df)
}
#
set_col_names <- function(df,old_col_names,new_col_names) {
names(new_col_names) <- old_col_names
rename_with(.data = df, .cols = old_col_names, .fn = function(x){new_col_names[x]})
}
#
change_col_types <- function(df) {
df$Gender <- as.factor(str_to_upper(df$Gender))
df$Year <- as.integer(df$Year)
df$Count <- as.integer(df$Count)
invisible(df)
}
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=ifelse(str_detect(filename,"female"),"FEMALE","MALE")) %>%
mutate(Year=str_match(filename,"_cy(\\d{4})_")[1,2]) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
# read all csv files using custom function
df <-
list.files(
path = "data/sa-baby-names-1944-2013",
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
path = "data/sa-baby-names-1944-2013",
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
# remove the superfluous attribute generated by read_csv()
remove_attr_spec <- function(df) {
attr(df,"spec") <- NULL
invisible(df)
}
#
set_col_names <- function(df,old_col_names,new_col_names) {
names(new_col_names) <- old_col_names
rename_with(.data = df, .cols = old_col_names, .fn = function(x){new_col_names[x]})
}
#
change_col_types <- function(df) {
df$Gender <- as.factor(str_to_upper(df$Gender))
df$Year <- as.integer(df$Year)
df$Count <- as.integer(df$Count)
invisible(df)
}
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=ifelse(str_detect(filename,"female"),"FEMALE","MALE")) %>%
mutate(Year=str_match(filename,"_cy(\\d{4})_")[1,2]) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
library(here)
getwd()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
str(data)
runApp()
input$state
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
df
str(df)
df %>% filter(State=="SA")
df %>% filter(Gender=="MALE")
df %>% filter(Gender=="MALE") %>% unique(Name)
str(df)
df %>% filter(Gender=="MALE") %>% unique(`Name`)
df %>% filter(Gender=="MALE") %>% unique(.Name)
foo <- df %>% filter(Gender=="MALE")
str(foo)
foo %>% filter(Name=="ANTHONY")
foo %>% filter(Gender=="MALE" & Name=="ANTHONY")
foo %>% filter(State=="SA" & Gender=="MALE" & Name=="ANTHONY")
install.packages("shinycustomerloader")
install.packages("shinycustomerloaders")
install.packages("shinycustomloader")
flnm <- "__female__"
ifelse(flnm,str_detect(filename,"female"),"FEMALE","MALE")
ifelse(str_detect(filename,"female"),"FEMALE","MALE")
ifelse(str_detect(flnm,"female"),"FEMALE","MALE")
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
source(paste0(here(),"/scripts/util.R"))
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
mygender <- ifelse(str_detect(filename,"female"),"FEMALE","MALE")
myyear <- str_match(filename,"_cy(\\d{4})_")[1,2]
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=mygender) %>%
mutate(Year=myyear) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
source(paste0(here(),"/scripts/util.R"))
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
mygender <- ifelse(str_detect(filename,"female"),"FEMALE","MALE")
myyear <- str_match(filename,"_cy(\\d{4})_")[1,2]
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=mygender) %>%
mutate(Year=myyear) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
# read all csv files using custom function
df <-
list.files(
path = paste0(here(),"/data/sa-baby-names-1944-2013"),
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
source(paste0(here(),"/scripts/util.R"))
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
mygender <- ifelse(str_detect(flnm,"female"),"FEMALE","MALE")
myyear <- str_match(flnm,"_cy(\\d{4})_")[1,2]
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=mygender) %>%
mutate(Year=myyear) %>%
mutate(Position=str_replace(Position,"=",""))
}
# read all csv files using custom function
df <-
list.files(
path = paste0(here(),"/data/sa-baby-names-1944-2013"),
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
df <- remove_attr_spec(df)
old_col_names <- colnames(df)
new_col_names <-  c("Name", "Count", "Position", "Filename", "Gender", "Year")
df <- set_col_names(df,all_of(old_col_names),new_col_names)
df <- select(df,"Name","Gender","Year","Count")
df <- change_col_types(df)
df <- df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
summarise(Count=sum(Count)) %>%
ungroup()
df$State <- "SA"
df_sa <- df
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
source(paste0(here(),"/scripts/util.R"))
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
mygender <- ifelse(str_detect(flnm,"female"),"FEMALE","MALE")
myyear <- str_match(flnm,"_cy(\\d{4})_")[1,2]
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=mygender) %>%
mutate(Year=myyear) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
# read all csv files using custom function
df <-
list.files(
path = paste0(here(),"/data/sa-baby-names-1944-2013"),
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
df <- remove_attr_spec(df)
old_col_names <- colnames(df)
new_col_names <-  c("Name", "Count", "Position", "Filename", "Gender", "Year")
df <- set_col_names(df,all_of(old_col_names),new_col_names)
df <- select(df,"Name","Gender","Year","Count")
df <- change_col_types(df)
df <- group_by(Name)
df %>% group_by(Name)
df %>% group_by(Name,Year)
df %>% group_by(Name,Year,Gender)
df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
mutate(Count=sum(Count)) %>%
df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
mutate(Count=sum(Count))
df %>%
group_by(Name,Year,Gender)
df %>%
group_by(Name,Year,Gender) %>% summarise(Count=sum(Count))
df %>%
group_by(Name,Year,Gender) %>% filter(n()>1)
df %>%
group_by(Name,Year,Gender) %>% arrange(Name,Year,Gender) %>% filter(n()>1)
df %>%
group_by(Name,Year,Gender) %>% arrange(Name,Year,Gender) %>% mutate(Count=sum(Count))
df %>%
group_by(Name,Year,Gender) %>% arrange(Name,Year,Gender) %>% mutate(Count=sum(Count)) %>% filter(Name=="AARON")
df <- df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
mutate(Count=sum(Count)) %>%
ungroup()
runApp()
runApp()
foo <- NULL
df %>% filter(State=="SA")
df %>% filter(State=="SA" & Gender=="MALE")
df %>% filter(State=="SA" & Gender=="MALE")
get_filtered_data <- function(input,data) {
if (input$state != "ALL") {
names_data <- data %>%
filter(State==input$state & Gender==input$gender)
} else {
names_data <- data %>%
filter(Gender==input$gender)
}
}
names_data <- get_filtered_data(input,data)
library(here)
getwd()
library(tidyverse)
library(readr)
#
# FUNCTIONS
#
source(paste0(here(),"/scripts/util.R"))
# read csv file, default to char to avoid parse errors
# append year and gender extracted from filename
read_plus <- function(flnm) {
mygender <- ifelse(str_detect(flnm,"female"),"FEMALE","MALE")
myyear <- str_match(flnm,"_cy(\\d{4})_")[1,2]
read_csv(flnm,col_types = cols(.default = "c")) %>%
mutate(filename = flnm) %>%
mutate(Gender=mygender) %>%
mutate(Year=myyear) %>%
mutate(Position=str_replace(Position,"=",""))
}
#
# MAIN
#
# read all csv files using custom function
df <-
list.files(
path = paste0(here(),"/data/sa-baby-names-1944-2013"),
pattern = "*.csv",
full.names = T) %>%
map_df(~read_plus(.))
df <- remove_attr_spec(df)
old_col_names <- colnames(df)
new_col_names <-  c("Name", "Count", "Position", "Filename", "Gender", "Year")
df <- set_col_names(df,all_of(old_col_names),new_col_names)
df <- select(df,"Name","Gender","Year","Count")
df <- change_col_types(df)
ungroup()
ds <- df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
mutate(Count=sum(Count)) %>%
ungroup()
df <- df %>%
group_by(Name,Year,Gender) %>%
arrange(Name,Year,Gender) %>%
mutate(Count=sum(Count)) %>%
ungroup()
shiny::runApp()
data$State <- as.factor(data$State)
data$State <- as.factor(data$State)
data$State <- as.factor(data$`State`)
data$`State` <- as.factor(data$`State`)
str(data)
str(df)
data <- df_sa
data$State <- as.factor(data$State)
data %>% filter(State=="SA")
data %>% filter(State=="SA" & Gender="MALE")
data %>% filter(State=="SA" & Gender=="MALE")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("../scripts/load_data_sa.R")
data <- df_sa
data$State <- as.factor(data$State)
data %>% filter(grepl("^ANTH",Name))
shiny::runApp()
data %>% filter(grepl("^ANTH",Name))
clear
cls
runApp()
runApp()
runApp()
data %>%
filter(grepl(paste0("^",name_prefix))) %>%
select(Name)
data %>%
filter(grepl(paste0("^",name_prefix,Name))) %>%
select(Name)
data %>%
filter(grepl(paste0("^",name_prefix),Name)) %>%
select(Name)
name_prefix <- "ANTH"
data %>%
filter(grepl(paste0("^",name_prefix),Name)) %>%
select(Name)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exists("names_data")
exists("names_data",mode="function")
nchar(name_prefix)
runApp()
runApp()
runApp()
foo <- names_data()
str(foo)
names_data() %>% select(Name)
names_filtered
input
input$update_plot
input$name
runApp()
runApp()
runApp()
str(names_filtered)
unique(names_filtered)
names_data() %>% unique()
names_data() %>% select(Name) %>% unique()
names_data() %>% select(Name) %>% unique() %>% as.character()
runApp()
runApp()
runApp()
names_filtered <- names_data()
names_filtered %>%
select(Name) %>%
unique()
foo <- names_filtered %>%
select(Name) %>%
unique()
str(foo)
foo <- names_filtered %>%
select(Name) %>%
unique(Name)
foo <- names_filtered %>%
select(Name) %>%
unique()
foo
foo %>% as.character()
c <- foo %>% as.character()
c <- foo %>% as.list()
runApp()
runApp()
runApp()
runApp()
runApp()
